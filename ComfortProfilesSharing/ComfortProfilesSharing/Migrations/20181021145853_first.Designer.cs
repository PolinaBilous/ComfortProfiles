// <auto-generated />
using System;
using ComfortProfilesSharing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComfortProfilesSharing.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181021145853_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComfortProfilesSharing.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.ChairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("ChairTypes");

                    b.HasData(
                        new { Id = 1, Name = "Type1" },
                        new { Id = 2, Name = "Type2" },
                        new { Id = 3, Name = "Type3" }
                    );
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.ClimatLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirHumidity");

                    b.Property<DateTime>("Date");

                    b.Property<int>("HowOftenId");

                    b.Property<bool?>("IsRepeatable");

                    b.Property<Guid>("RoomId");

                    b.Property<int>("Temperature");

                    b.HasKey("Id");

                    b.HasIndex("HowOftenId");

                    b.HasIndex("RoomId");

                    b.ToTable("ClimatLogs");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.CoffeeDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<int>("CurrentCoffeeAmount");

                    b.Property<int>("CurrentMilkAmount");

                    b.Property<int>("CurrentWaterAmount");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("CoffeDevices");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.CoffeeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CoffeeDeviceId");

                    b.Property<Guid>("CoffeeTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("HowOftenId");

                    b.Property<bool?>("IsRepeatable");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeDeviceId");

                    b.HasIndex("CoffeeTypeId");

                    b.HasIndex("HowOftenId");

                    b.ToTable("CoffeeLogs");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.CoffeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CoffeeTypes");

                    b.HasData(
                        new { Id = new Guid("ed0c5443-df60-42db-82a0-3a0d61d13051"), Name = "Americano" },
                        new { Id = new Guid("377126ea-6497-4451-9efd-3520d81f23e0"), Name = "Latte" },
                        new { Id = new Guid("2b249754-8876-4339-a6b8-213c1788b8ca"), Name = "Cappuccino" },
                        new { Id = new Guid("714717b9-f3fe-49a2-98f2-cd3194b668bc"), Name = "Espresso" },
                        new { Id = new Guid("3de38b46-4a9e-489f-9dfa-f6fcc45af7bc"), Name = "Macchiato" },
                        new { Id = new Guid("074c7f0d-2e6c-4aa4-ae47-eeb11c82fc87"), Name = "Mochaccino" },
                        new { Id = new Guid("37c4d568-a2e7-4281-88cb-00db855cfd02"), Name = "Flat White" },
                        new { Id = new Guid("96c22fe9-b353-41cc-9c44-18c0b3e926be"), Name = "Vienna" }
                    );
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.HowOften", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Explanation");

                    b.HasKey("Id");

                    b.ToTable("HowOftens");

                    b.HasData(
                        new { Id = 1, Explanation = "Never" },
                        new { Id = 2, Explanation = "Every Day" },
                        new { Id = 3, Explanation = "Every Monday" },
                        new { Id = 4, Explanation = "Every Tuesday" },
                        new { Id = 5, Explanation = "Every Wednesday" },
                        new { Id = 6, Explanation = "Every Thursday" },
                        new { Id = 7, Explanation = "Every Friday" },
                        new { Id = 8, Explanation = "Every Saturday" },
                        new { Id = 9, Explanation = "Every Sunday" },
                        new { Id = 10, Explanation = "Every Weekday" },
                        new { Id = 11, Explanation = "Every Weekend" }
                    );
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.IlluminationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("HowOftenId");

                    b.Property<bool>("IsLight");

                    b.Property<bool?>("IsRepeatable");

                    b.Property<int>("LightIntensity");

                    b.Property<Guid>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("HowOftenId");

                    b.HasIndex("RoomId");

                    b.ToTable("IlluminationLogs");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.MattressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("MattressTypes");

                    b.HasData(
                        new { Id = 1, Name = "Type1" },
                        new { Id = 2, Name = "Type2" },
                        new { Id = 3, Name = "Type3" }
                    );
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<int>("CurrentAirHumidity");

                    b.Property<bool>("CurrentIsLight");

                    b.Property<int>("CurrentLightIntensity");

                    b.Property<int>("CurrentTemperature");

                    b.Property<string>("Name");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.StaticInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Allergens");

                    b.Property<string>("AppUserId");

                    b.Property<int>("ChairTypeId");

                    b.Property<int>("ClothingSize");

                    b.Property<string>("FruitPreferences");

                    b.Property<string>("KindOfCoffee");

                    b.Property<string>("KindOfTea");

                    b.Property<int>("MattressTypeId");

                    b.Property<string>("MusicalPreferences");

                    b.Property<int>("ShoeSize");

                    b.Property<int>("TableTypeId");

                    b.Property<int>("WaterTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.HasIndex("ChairTypeId");

                    b.HasIndex("MattressTypeId");

                    b.HasIndex("TableTypeId");

                    b.HasIndex("WaterTypeId");

                    b.ToTable("StaticInfos");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.TableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("TableTypes");

                    b.HasData(
                        new { Id = 1, Name = "Type1" },
                        new { Id = 2, Name = "Type2" },
                        new { Id = 3, Name = "Type3" }
                    );
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.Teapot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<int>("ComfortTemperature");

                    b.Property<int>("CurrentTemperature");

                    b.Property<int>("CurrentWaterAmount");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("Teapots");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.TeapotLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("HowOftenId");

                    b.Property<bool?>("IsRepeatable");

                    b.Property<Guid>("TeapotId");

                    b.Property<int>("Temperature");

                    b.HasKey("Id");

                    b.HasIndex("HowOftenId");

                    b.HasIndex("TeapotId");

                    b.ToTable("TeapotLogs");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.WaterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WaterTypes");

                    b.HasData(
                        new { Id = 1, Name = "Carbonated" },
                        new { Id = 2, Name = "Not carbonated" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.ClimatLog", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.HowOften", "HowOften")
                        .WithMany("ClimatLogs")
                        .HasForeignKey("HowOftenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.Room", "Room")
                        .WithMany("ClimatLogs")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.CoffeeDevice", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.AppUser", "AppUser")
                        .WithOne("CoffeDevice")
                        .HasForeignKey("ComfortProfilesSharing.Models.CoffeeDevice", "AppUserId");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.CoffeeLog", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.CoffeeDevice", "CoffeeDevice")
                        .WithMany("CoffeeLogs")
                        .HasForeignKey("CoffeeDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.CoffeeType", "CoffeeType")
                        .WithMany("CoffeLogs")
                        .HasForeignKey("CoffeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.HowOften", "HowOften")
                        .WithMany("CoffeeLogs")
                        .HasForeignKey("HowOftenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.IlluminationLog", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.HowOften", "HowOften")
                        .WithMany("IlluminationLogs")
                        .HasForeignKey("HowOftenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.Room", "Room")
                        .WithMany("IlluminationLogs")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.Room", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.AppUser", "AppUser")
                        .WithMany("Rooms")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.StaticInfo", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.AppUser", "AppUser")
                        .WithOne("StaticInfo")
                        .HasForeignKey("ComfortProfilesSharing.Models.StaticInfo", "AppUserId");

                    b.HasOne("ComfortProfilesSharing.Models.ChairType", "ChairType")
                        .WithMany("StaticInfos")
                        .HasForeignKey("ChairTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.MattressType", "MattressType")
                        .WithMany("StaticInfos")
                        .HasForeignKey("MattressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.TableType", "TableType")
                        .WithMany("StaticInfos")
                        .HasForeignKey("TableTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.WaterType", "WaterType")
                        .WithMany("StaticInfos")
                        .HasForeignKey("WaterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.Teapot", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.AppUser", "AppUser")
                        .WithOne("Teapot")
                        .HasForeignKey("ComfortProfilesSharing.Models.Teapot", "AppUserId");
                });

            modelBuilder.Entity("ComfortProfilesSharing.Models.TeapotLog", b =>
                {
                    b.HasOne("ComfortProfilesSharing.Models.HowOften", "HowOften")
                        .WithMany("TeapotLogs")
                        .HasForeignKey("HowOftenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComfortProfilesSharing.Models.Teapot", "Teapot")
                        .WithMany("TeapotLogs")
                        .HasForeignKey("TeapotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
